{"version":3,"sources":["components/PerguntaAberta.js","components/PerguntaFechada.js","components/Etapa1.js","components/Etapa2.js","components/Etapa3.js","components/Final.js","App.js","serviceWorker.js","index.js"],"names":["PerguntaAberta","state","valorInput","onChangeInput","event","props","setValue","target","value","setState","this","pergunta","type","onChange","React","Component","PerguntaFechada","valor","onChangeSelect","opcoes","map","opcao","key","Etapa1","Etapa2","Etapa3","Final","App","id","cliques","cliquesEtapas","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOAsBeA,E,4MAnBXC,MAAQ,CACJC,WAAY,I,EAGhBC,cAAgB,SAACC,GACb,EAAKC,MAAMC,SAASF,EAAMG,OAAOC,OACjC,EAAKC,SAAS,CAAEP,WAAYE,EAAMG,OAAOC,S,uDAIzC,OACI,6BACI,2BAAIE,KAAKL,MAAMM,UACf,2BAAOC,KAAK,OAAOJ,MAAOE,KAAKT,MAAMC,WAAYW,SAAUH,KAAKP,qB,GAdnDW,IAAMC,WCkBpBC,E,uKAfP,IAAIC,EAAQ,EACZ,OACI,6BACI,2BAAIP,KAAKL,MAAMM,UACf,4BAAQE,SAAUH,KAAKQ,gBAClBR,KAAKL,MAAMc,OAAOC,KAAI,SAAAC,GAEnB,OADAJ,IACO,4BAAQK,IAAKL,EAAOT,MAAOS,GAAQI,Y,GAVpCP,IAAMC,WCwBrBQ,E,uKApBX,OACE,6BACE,sDACA,kBAAC,EAAD,CAAgBZ,SAAU,wBAC1B,kBAAC,EAAD,CAAgBA,SAAU,uBAC1B,kBAAC,EAAD,CAAgBA,SAAU,uBAC1B,kBAAC,EAAD,CACEA,SAAU,8BACVQ,OAAQ,CACN,6BACA,2BACA,6BACA,mC,GAdSL,IAAMC,WCYZS,E,uKAXX,OACE,6BACE,+EAEA,kBAAC,EAAD,CAAgBb,SAAU,mBAC1B,kBAAC,EAAD,CAAgBA,SAAU,sC,GAPbG,IAAMC,WCqBZU,E,uKAlBX,OACE,6BACE,4EACA,kBAAC,EAAD,CAAgBd,SAAU,oEAC1B,kBAAC,EAAD,CAAgBA,SAAU,6CAC1B,kBAAC,EAAD,CACEA,SAAU,8BACVQ,OAAQ,CACN,SACA,mBACA,6B,GAZSL,IAAMC,WCUZW,E,uKAVP,OACI,6BACI,wDACA,yF,GALIZ,IAAMC,WCwBXY,G,kNAlBb1B,MAAQ,CACN2B,GAAI,EACJC,QAAS,CAAC,kBAAC,EAAD,MAAW,kBAAC,EAAD,MAAW,kBAAC,EAAD,MAAW,kBAAC,EAAD,Q,EAE7CC,cAAgB,WACd,EAAKrB,SAAS,CAAEmB,GAAI,EAAK3B,MAAM2B,GAAK,K,uDAIpC,OACE,oCACGlB,KAAKT,MAAM4B,QAAQnB,KAAKT,MAAM2B,IAC9BlB,KAAKT,MAAM2B,GAAK,GAAK,4BAAQG,QAASrB,KAAKoB,eAAtB,yB,GAbZhB,IAAMC,YCKJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ebace5fe.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass PerguntaAberta extends React.Component {\r\n    state = {\r\n        valorInput: \"\",\r\n    }\r\n\r\n    onChangeInput = (event) => {\r\n        this.props.setValue(event.target.value)\r\n        this.setState({ valorInput: event.target.value });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>{this.props.pergunta}</p>\r\n                <input type='text' value={this.state.valorInput} onChange={this.onChangeInput}  />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PerguntaAberta;","import React from \"react\";\r\n\r\nclass PerguntaFechada extends React.Component {\r\n\r\n    render() {\r\n        let valor = 0;\r\n        return (\r\n            <div>\r\n                <p>{this.props.pergunta}</p>\r\n                <select onChange={this.onChangeSelect}>\r\n                    {this.props.opcoes.map(opcao => {\r\n                        valor++;\r\n                        return <option key={valor} value={valor}>{opcao}</option>\r\n                    })}\r\n                </select>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PerguntaFechada;","import React from \"react\";\r\nimport PerguntaAberta from \"./PerguntaAberta\";\r\nimport PerguntaFechada from \"./PerguntaFechada\";\r\n\r\nclass Etapa1 extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>ETAPA 1 - DADOS GERAIS</h1>\r\n        <PerguntaAberta pergunta={\"1. Qual o seu nome?\"} />\r\n        <PerguntaAberta pergunta={\"2. Qual sua idade?\"} />\r\n        <PerguntaAberta pergunta={\"3. Qual seu email?\"} />\r\n        <PerguntaFechada\r\n          pergunta={\"4. Qual a sua escolaridade?\"}\r\n          opcoes={[\r\n            \"Ensino médio incompleto\",\r\n            \"Ensino médio completo\",\r\n            \"Ensino superior incompleto\",\r\n            \"Ensino superior completo\"\r\n          ]}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Etapa1;","import React from \"react\";\r\nimport PerguntaAberta from \"./PerguntaAberta\";\r\n\r\nclass Etapa2 extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1> ETAPA 2 - INFORMAÇÕES DO ENSINO SUPERIOR</h1>\r\n\r\n        <PerguntaAberta pergunta={\"5. Qual curso?\"} />\r\n        <PerguntaAberta pergunta={\"6. Qual a unidade de ensino?\"} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Etapa2;","import React from \"react\";\r\nimport PerguntaAberta from \"./PerguntaAberta\";\r\nimport PerguntaFechada from \"./PerguntaFechada\";\r\n\r\nclass Etapa3 extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>ETAPA 3 - INFORMAÇÕES GERAIS DE ENSINO</h1>\r\n        <PerguntaAberta pergunta={\"7. Por que você não terminou um curso de graduação?\"} />\r\n        <PerguntaAberta pergunta={\"8. Você fez algum curso complementar?\"} />\r\n        <PerguntaFechada\r\n          pergunta={\"4. Qual a sua escolaridade?\"}\r\n          opcoes={[\r\n            \"Nenhum\",\r\n            \"Curso técnico\",\r\n            \"Curso de inglês\",\r\n          ]}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Etapa3;","import React from 'react';\r\n\r\nclass Final extends React.Component {\r\n    render () {\r\n        return (\r\n            <div>\r\n                <h1> O FORMULÁRIO ACABOU </h1>\r\n                <p>Muito obrigado por participar! Entraremos em contato!</p>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Final;","import React from 'react';\nimport Etapa1 from './components/Etapa1';\nimport Etapa2 from './components/Etapa2';\nimport Etapa3 from './components/Etapa3';\nimport Final from './components/Final'\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    id: 0,\n    cliques: [<Etapa1/>, <Etapa2/>, <Etapa3/>, <Final/>],\n  }\n  cliquesEtapas = () => {\n    this.setState({ id: this.state.id + 1})\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.cliques[this.state.id]}\n        {this.state.id < 3 && <button onClick={this.cliquesEtapas}>Próxima etapa</button>}\n      </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}